name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  version:
    name: Update Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version
        run: |
          cargo set-version --bump ${{ github.event.inputs.version_bump }}
          NEW_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          TAG_NAME="v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Bumped version from ${{ steps.current_version.outputs.current_version }} to $NEW_VERSION"

      - name: Commit version bump
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Cargo.toml Cargo.lock
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.tag_name }}
          git push origin ${{ steps.version.outputs.tag_name }}

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [version]
    if: always() && (needs.version.result == 'success' || github.event_name == 'push')
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rollpoly
            asset_name: rollpoly-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rollpoly
            asset_name: rollpoly-linux-arm64
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rollpoly.exe
            asset_name: rollpoly-windows-amd64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: rollpoly.exe
            asset_name: rollpoly-windows-arm64.exe
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rollpoly
            asset_name: rollpoly-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rollpoly
            asset_name: rollpoly-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ needs.version.outputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Run tests
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
        run: cargo test --target ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          elif [ "${{ matrix.target }}" = "x86_64-apple-darwin" ] || [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, build]
    if: always() && needs.build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ needs.version.outputs.tag_name }}" >> $GITHUB_OUTPUT
            echo "version=${{ needs.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          else
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          mkdir -p release
          cd artifacts
          
          # Create tar.gz for Linux binaries
          for dir in rollpoly-linux-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              chmod +x rollpoly
              tar -czf "../../release/${dir}.tar.gz" rollpoly
              cd ..
            fi
          done
          
          # Create tar.gz for macOS binaries
          for dir in rollpoly-macos-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              chmod +x rollpoly
              tar -czf "../../release/${dir}.tar.gz" rollpoly
              cd ..
            fi
          done
          
          # Create zip for Windows binaries
          for dir in rollpoly-windows-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              zip "../../release/${dir}.zip" rollpoly.exe
              cd ..
            fi
          done

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual releases, generate changelog from recent commits
            CHANGELOG=$(git log --pretty=format:"- %s" --since="$(git log -1 --format=%cd --date=short $(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo HEAD~10))" | head -20)
          else
            # For tag pushes, use commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              CHANGELOG=$(git log --pretty=format:"- %s" ${LAST_TAG}..HEAD)
            else
              CHANGELOG=$(git log --pretty=format:"- %s" -10)
            fi
          fi
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Initial release"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Release ${{ steps.tag.outputs.version }}
          body: |
            ## Changes
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Downloads
            
            ### Linux
            - **AMD64**: `rollpoly-linux-amd64.tar.gz`
            - **ARM64**: `rollpoly-linux-arm64.tar.gz`
            
            ### macOS
            - **Intel (AMD64)**: `rollpoly-macos-amd64.tar.gz`
            - **Apple Silicon (ARM64)**: `rollpoly-macos-arm64.tar.gz`
            
            ### Windows
            - **AMD64**: `rollpoly-windows-amd64.exe.zip`
            - **ARM64**: `rollpoly-windows-arm64.exe.zip`
            
            ## Installation
            
            ### Linux
            ```bash
            # Download and extract (AMD64 example)
            wget https://github.com/raykrueger/rollpoly/releases/download/${{ steps.tag.outputs.tag_name }}/rollpoly-linux-amd64.tar.gz
            tar -xzf rollpoly-linux-amd64.tar.gz
            chmod +x rollpoly
            sudo mv rollpoly /usr/local/bin/
            ```
            
            ### macOS
            ```bash
            # Download and extract (choose based on your Mac)
            # For Intel Macs:
            wget https://github.com/raykrueger/rollpoly/releases/download/${{ steps.tag.outputs.tag_name }}/rollpoly-macos-amd64.tar.gz
            tar -xzf rollpoly-macos-amd64.tar.gz
            
            # For Apple Silicon Macs:
            wget https://github.com/raykrueger/rollpoly/releases/download/${{ steps.tag.outputs.tag_name }}/rollpoly-macos-arm64.tar.gz
            tar -xzf rollpoly-macos-arm64.tar.gz
            
            # Install (both):
            chmod +x rollpoly
            sudo mv rollpoly /usr/local/bin/
            ```
            
            ### Windows
            Download the appropriate `.zip` file, extract `rollpoly.exe`, and add it to your PATH.
            
            ## Usage
            ```bash
            rollpoly "4d6K3"    # Roll 4d6, keep highest 3
            rollpoly "2d20k"    # Roll 2d20, keep lowest (disadvantage)
            rollpoly "1d20+5"   # Roll 1d20 and add 5
            ```
          files: |
            release/*.tar.gz
            release/*.zip
          draft: false
          prerelease: false
          generate_release_notes: false
