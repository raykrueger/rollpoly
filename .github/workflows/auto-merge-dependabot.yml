name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    # Only run on Dependabot PRs
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            let pr;
            if (context.eventName === 'pull_request' || context.eventName === 'pull_request_review') {
              pr = context.payload.pull_request;
            } else {
              // For check_suite and status events, we need to find the PR
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.payload.check_suite?.head_branch || context.payload.branches?.[0]?.name}`
              });
              
              if (prs.data.length === 0) {
                console.log('No open PR found for this commit');
                return;
              }
              
              pr = prs.data[0];
            }
            
            if (!pr) {
              console.log('No PR found');
              return;
            }
            
            console.log(`Found PR #${pr.number}: ${pr.title}`);
            console.log(`Author: ${pr.user.login}`);
            console.log(`Draft: ${pr.draft}`);
            console.log(`Mergeable: ${pr.mergeable}`);
            console.log(`Mergeable state: ${pr.mergeable_state}`);
            
            return {
              number: pr.number,
              title: pr.title,
              author: pr.user.login,
              draft: pr.draft,
              mergeable: pr.mergeable,
              mergeable_state: pr.mergeable_state,
              head_sha: pr.head.sha
            };

      - name: Check if PR is from Dependabot
        id: dependabot_check
        if: steps.pr.outputs.result != 'undefined'
        run: |
          PR_AUTHOR="${{ fromJson(steps.pr.outputs.result).author }}"
          if [ "$PR_AUTHOR" = "dependabot[bot]" ]; then
            echo "is_dependabot=true" >> $GITHUB_OUTPUT
            echo "✅ PR is from Dependabot"
          else
            echo "is_dependabot=false" >> $GITHUB_OUTPUT
            echo "❌ PR is not from Dependabot (author: $PR_AUTHOR)"
          fi

      - name: Check PR status
        id: pr_status
        if: steps.dependabot_check.outputs.is_dependabot == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = JSON.parse('${{ steps.pr.outputs.result }}');
            
            if (pr.draft) {
              console.log('❌ PR is a draft');
              return { ready: false, reason: 'PR is a draft' };
            }
            
            if (pr.mergeable === false) {
              console.log('❌ PR has merge conflicts');
              return { ready: false, reason: 'PR has merge conflicts' };
            }
            
            // Get the latest commit status
            const { data: statuses } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head_sha
            });
            
            console.log(`Combined status: ${statuses.state}`);
            console.log(`Total checks: ${statuses.statuses.length}`);
            
            // Get check runs (for GitHub Actions)
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head_sha
            });
            
            console.log(`Check runs: ${checkRuns.check_runs.length}`);
            
            // Check if all status checks are successful
            const failedStatuses = statuses.statuses.filter(status => status.state !== 'success');
            const failedChecks = checkRuns.check_runs.filter(check => 
              check.status === 'completed' && check.conclusion !== 'success' && check.conclusion !== 'neutral'
            );
            
            const pendingChecks = checkRuns.check_runs.filter(check => 
              check.status !== 'completed'
            );
            
            console.log(`Failed statuses: ${failedStatuses.length}`);
            console.log(`Failed checks: ${failedChecks.length}`);
            console.log(`Pending checks: ${pendingChecks.length}`);
            
            if (failedStatuses.length > 0) {
              console.log('❌ Some status checks failed:');
              failedStatuses.forEach(status => console.log(`  - ${status.context}: ${status.state}`));
              return { ready: false, reason: 'Status checks failed' };
            }
            
            if (failedChecks.length > 0) {
              console.log('❌ Some check runs failed:');
              failedChecks.forEach(check => console.log(`  - ${check.name}: ${check.conclusion}`));
              return { ready: false, reason: 'Check runs failed' };
            }
            
            if (pendingChecks.length > 0) {
              console.log('⏳ Some checks are still pending:');
              pendingChecks.forEach(check => console.log(`  - ${check.name}: ${check.status}`));
              return { ready: false, reason: 'Checks still pending' };
            }
            
            // Additional check: ensure we have some checks (not just an empty state)
            if (statuses.statuses.length === 0 && checkRuns.check_runs.length === 0) {
              console.log('⏳ No checks found yet, waiting for checks to start');
              return { ready: false, reason: 'No checks found yet' };
            }
            
            console.log('✅ All checks passed!');
            return { ready: true, reason: 'All checks passed' };

      - name: Auto-merge PR
        if: steps.dependabot_check.outputs.is_dependabot == 'true' && fromJson(steps.pr_status.outputs.result).ready == true
        uses: actions/github-script@v7
        with:
          script: |
            const pr = JSON.parse('${{ steps.pr.outputs.result }}');
            
            try {
              console.log(`🚀 Auto-merging Dependabot PR #${pr.number}`);
              
              // Enable auto-merge with squash
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                commit_title: `${pr.title} (#${pr.number})`,
                commit_message: `Automatically merged Dependabot PR after all checks passed.`,
                merge_method: 'squash'
              });
              
              console.log('✅ PR successfully auto-merged!');
              
              // Add a comment to the PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `🤖 **Auto-merged by Dependabot workflow**
                
                This PR was automatically merged because:
                ✅ Created by Dependabot
                ✅ All automated tests passed
                ✅ No merge conflicts
                ✅ Not a draft PR
                
                The dependency updates have been successfully integrated! 🎉`
              });
              
            } catch (error) {
              console.error('❌ Failed to auto-merge PR:', error.message);
              
              // Add a comment explaining why auto-merge failed
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `🤖 **Auto-merge attempted but failed**
                
                This Dependabot PR met all the criteria for auto-merge:
                ✅ Created by Dependabot
                ✅ All automated tests passed
                ✅ No merge conflicts
                ✅ Not a draft PR
                
                However, the auto-merge failed with error: \`${error.message}\`
                
                Please merge this PR manually when convenient. 🔧`
              });
              
              throw error;
            }

      - name: Log status
        if: always() && steps.dependabot_check.outputs.is_dependabot == 'true'
        run: |
          echo "## 🤖 Dependabot Auto-merge Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.pr_status.outputs.result }}" != "" ]; then
            STATUS_RESULT='${{ steps.pr_status.outputs.result }}'
            READY=$(echo "$STATUS_RESULT" | jq -r '.ready')
            REASON=$(echo "$STATUS_RESULT" | jq -r '.reason')
            
            echo "**PR Ready for Auto-merge**: $READY" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: $REASON" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$READY" = "true" ]; then
              echo "✅ **Action**: PR was auto-merged successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏳ **Action**: Waiting for conditions to be met" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Status**: Could not determine PR status" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Auto-merge Criteria:" >> $GITHUB_STEP_SUMMARY
          echo "- [x] PR created by Dependabot" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ fromJson(steps.pr_status.outputs.result || '{}').ready == true && '[x]' || '[ ]' }} All automated tests pass" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ fromJson(steps.pr.outputs.result || '{}').draft == false && '[x]' || '[ ]' }} Not a draft PR" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ fromJson(steps.pr.outputs.result || '{}').mergeable != false && '[x]' || '[ ]' }} No merge conflicts" >> $GITHUB_STEP_SUMMARY
